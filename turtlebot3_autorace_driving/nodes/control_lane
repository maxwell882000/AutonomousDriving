#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
import numpy as np
from std_msgs.msg import Float64, Bool, Int16
from geometry_msgs.msg import Twist
from turtlebot3_autorace_msgs.msg import MovingParam


BIG_TURN = 2.0
SPEED = 0.03
ROTATE  = 0.38
class ControlLane():
    def __init__(self):
        rospy.loginfo("Started running")
        self.moving_mode = rospy.Subscriber("/control/is_moving", Bool, self.setMoving, queue_size= 1 )
        self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.cbFollowLane, queue_size = 1)
        self.sub_avoid = rospy.Subscriber('/control/avoid', Int16, )
        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)
        self.pub_cmd_vel = rospy.Publisher('/control/cmd_vel', Twist, queue_size = 1)
        self.pub_centered = rospy.Publisher('/control/centered', Bool, queue_size= 1)
        self.pub_stopped = rospy.Publisher('/control/stopped', Bool, queue_size= 1)
        self.moving_mode = rospy.Subscriber("/control/traffic_light", Bool, self.trafficLight, queue_size= 1 ) 
        self.finish_traffic = False
        def finishStop(msg):
            self.finish_traffic = True
        self.finish_traffic_light = rospy.Subscriber("/control/finish_traffic_light", Bool, finishStop,queue_size= 1 )   
        self.is_moving = True
        self.is_centered = False
        self.lastError = 0
        self.MAX_VEL =0.05
        self.is_light = True
        self.light_all = 0
        rospy.on_shutdown(self.fnShutDown)

    def trafficLight(self, light):
        self.is_light = bool(light.data)
        if self.is_light == False:
            self.light_all += 1
            if self.light_all >= 2:
                self.is_light = True
    def setMoving(self, is_moving):
        print("PUBlISH MOVEMENT {}".format( bool(is_moving.data)))
        self.is_moving = bool(is_moving.data)
        
    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    
    def cbFollowLane(self, desired_center): 
        if self.is_light or self.finish_traffic:           
                center = desired_center.data
                error = center - 500           
            
                Kp = 0.0025
                Kd = 0.007

                angular_z = Kp * error + Kd * (error - self.lastError)
                self.lastError = error
                if self.is_moving:
                    self.pub_stopped.publish(False)
                    self.pub_centered.publish( -0.06 < angular_z < 0.06 )
                    twist = Twist()
                    # twist.linear.x = 0.05        
                    try:
                        twist.linear.x = max(self.MAX_VEL * ((1 - abs(error) / 500) ** 2.2), SPEED)
                    except:
                        twist.linear.x = SPEED
                    twist.linear.y = 0
                    twist.linear.z = 0
                    twist.angular.x = 0
                    twist.angular.y = 0
                    twist.angular.z = -max(angular_z, -ROTATE) if angular_z < 0 else -min(angular_z, ROTATE)
                    self.pub_cmd_vel.publish(twist)
                else:
                    self.fnShutDown()
                    self.pub_stopped.publish(True)
        else:
            self.fnShutDown()
                
    def fnShutDown(self,x= 0 ,  angle = 0):
        # rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = x
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = angle
        self.pub_cmd_vel.publish(twist) 

    def main(self):
      
        # self.fnShutDown()
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
