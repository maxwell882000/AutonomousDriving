#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, Gilbert, Ashe Kim, Special Thanks : Roger Sacchelli

import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from std_msgs.msg import UInt8, Float64,Bool
from geometry_msgs.msg import Twist

from sensor_msgs.msg import Image, CompressedImage
from dynamic_reconfigure.server import Server
from turtlebot3_autorace_detect.cfg import DetectLaneParamsConfig

from turtlebot3_autorace_msgs.msg import MovingParam

class DetectLane():
    def __init__(self):
      
        self.sub_image_type = "raw"         # you can choose image type "compressed", "raw"
        self.pub_image_type = "compressed"  # you can choose image type "compressed", "raw"

        self.sub_detect_line = rospy.Subscriber('/detect/yellow/near', Bool, self.avoidYellowRight, queue_size=1 )
        self.moving_mode = rospy.Publisher("/control/is_moving", Bool, queue_size= 1)
        
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)

        self.velocity_publisher = rospy.Publisher('/control/cmd_vel', Twist, queue_size=1)
        self.is_right = True



    def avoidYellowRight(self, image_msg):
        rospy.loginfo("STARTED ")
        self.moving_mode.publish(False)
        msg_moving = MovingParam()
        msg_moving.moving_type = 2
        msg_moving.moving_value_angular = 90
        msg_moving.moving_value_linear = 0
        self.pub_moving.publish(msg_moving)
        rospy.sleep(9)
        
        msg_moving = MovingParam()
        msg_moving.moving_type = 4
        msg_moving.moving_value_linear = 0.1
        self.pub_moving.publish(msg_moving)
        rospy.sleep(9)
        
        msg_moving = MovingParam()
        msg_moving.moving_type = 3
        msg_moving.moving_value_angular = 90
        msg_moving.moving_value_linear = 0
        self.pub_moving.publish(msg_moving)
        rospy.sleep(9)
        
        msg_moving = MovingParam()
        msg_moving.moving_type = 4
        msg_moving.moving_value_linear = 0.1
        self.pub_moving.publish(msg_moving)
        rospy.sleep(9)
        
        self.is_right = False
        self.moving_mode.publish(True)
        rospy.loginfo("FINISHED")


    
    def main(self):
        # pass
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_turtle')
    node = DetectLane()
    node.main()
