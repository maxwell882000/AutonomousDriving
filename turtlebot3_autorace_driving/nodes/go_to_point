#! /usr/bin/env python3

import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist, Point
from nav_msgs.msg import Odometry
from tf import transformations
import math

class GoToPoint:
    def __init__(self):
        # robot state variables
        self.position_ = Point()
        self.yaw_ = 0

        # machine state
        self.state_ = 0

        # goal
        self.desired_position_ = Point()
        self.desired_position_.x = 0.25999605551676425
        self.desired_position_.y = -0.15388037578627756
        self.desired_position_.z = 0

        # parameters
        self.yaw_precision_ = math.pi / 90 # +/- 2 degree allowed
        self.dist_precision_ = 0.3

        # publishers
        self.pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

        # subscribers
        rospy.Subscriber('/odom', Odometry, self.odom_callback)

    def odom_callback(self, msg):
        # position
        self.position_ = msg.pose.pose.position
        print(self.position_.y, self.position_.x)
        # yaw
        quaternion = (
            msg.pose.pose.orientation.x,
            msg.pose.pose.orientation.y,
            msg.pose.pose.orientation.z,
            msg.pose.pose.orientation.w)
        euler = transformations.euler_from_quaternion(quaternion)
        self.yaw_ = euler[2]

    def fix_yaw(self):
        desired_yaw = math.atan2(self.desired_position_.y - self.position_.y, self.desired_position_.x - self.position_.x)
        err_yaw = desired_yaw - self.yaw_

        twist_msg = Twist()
        if math.fabs(err_yaw) > self.yaw_precision_:
            twist_msg.angular.z = 0.7 if err_yaw > 0 else -0.7

        self.pub.publish(twist_msg)

        # state change conditions
        if math.fabs(err_yaw) <= self.yaw_precision_:
            print('Yaw error: [%s]' % err_yaw)
            self.change_state(1)

    def go_straight_ahead(self):
        
        desired_yaw = math.atan2(self.desired_position_.y - self.position_.y, self.desired_position_.x - self.position_.x)
        err_yaw = desired_yaw - self.yaw_
        err_pos = math.sqrt(pow(self.desired_position_.y - self.position_.y, 2) + pow(self.desired_position_.x - self.position_.x, 2))

        if err_pos > self.dist_precision_:
            twist_msg = Twist()
            twist_msg.linear.x = 0.03
            self.pub.publish(twist_msg)
        else:
            print('Position error: [%s]' % err_pos)
            self.change_state(2)

        # state change conditions
        if math.fabs(err_yaw) > self.yaw_precision_:
            print('Yaw error: [%s]' % err_yaw)
            self.change_state(0)

    def done(self):
        twist_msg = Twist()
        twist_msg.linear.x = 0
        twist_msg.angular.z = 0
        self.pub.publish(twist_msg)

    def change_state(self, state):
        self.state_ = state
        print('State changed to [%s]' % state)

    def main(self):
        rospy.init_node('go_to_point')
        rate = rospy.Rate(10)

        while not rospy.is_shutdown():
            if self.state_ == 0:
                self.fix_yaw()
            elif self.state_ == 1:
                self.go_straight_ahead()
            elif self.state_ == 2:
                self.done()
            else:
                rospy.logerr('Unknown state!')
                
            rate.sleep()
            
if __name__ == '__main__':
    r = GoToPoint()
    r.main()