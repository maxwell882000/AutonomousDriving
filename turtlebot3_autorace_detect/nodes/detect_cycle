#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
import os
from enum import Enum
from std_msgs.msg import UInt8, Float64,Bool
from sensor_msgs.msg import LaserScan
from turtlebot3_autorace_msgs.msg import MovingParam

class DetectCycling():
    
    def __init__(self):
        # subscribes state 
        self.sub_cycling_order = rospy.Subscriber('/detect/cycling_order', Bool, self.cbCyclingOrder, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        
        # publishes state
        self.pub_cycling_return = rospy.Publisher('/detect/cycling_stamped', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
        self.moving_mode = rospy.Publisher("/control/is_moving", Bool, queue_size= 1 )
        self.StepOfCycling = Enum('StepOfCycling', 'cycling exit')
        self.is_moving_complete = False

    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def cbCyclingOrder(self, order):
        msg_pub_cycling_return = UInt8()
        rospy.loginfo("go straight")
        msg_moving = MovingParam()
        msg_moving.moving_type= 4
        msg_moving.moving_value_angular=0.0
        msg_moving.moving_value_linear=0.55
        self.pub_moving.publish(msg_moving)
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False
        
        msg_pub_cycling_return.data = self.StepOfCycling.exit.value
        self.pub_cycling_return.publish(msg_pub_cycling_return)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_cycling')
    node = DetectCycling()
    node.main()
