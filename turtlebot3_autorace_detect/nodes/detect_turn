#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
import os 
from enum import Enum
from std_msgs.msg import UInt8,Int32
from constants import SIGNS, TASK_PARTS
from turtlebot3_autorace_msgs.msg import MovingParam

class DetectIntersection():
    def __init__(self):
        

        
        self.sub_intersection_order = rospy.Subscriber('/detect/intersection_order', UInt8, self.cbIntersectionOrder, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.pub_flow_task = rospy.Publisher('/core/flow_task', Int32, queue_size=1)
        self.pub_intersection_return = rospy.Publisher('/detect/intersection_stamped', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
    
        self.StepOfIntersection = Enum('StepOfIntersection', 'right left exit')

        self.is_avoid_obstacle = True
        self.is_moving_complete = False


    def cbMovingComplete(self, data):
        self.is_moving_complete = True
   
    def avoid_obstacle_turn(self):
        self.is_avoid_obstacle = False
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False
                
        rospy.loginfo("go straight")
        msg_moving = MovingParam()
        msg_moving.moving_type=4
        msg_moving.moving_value_angular=0
        msg_moving.moving_value_linear= 0.1
        self.pub_moving.publish(msg_moving)
        
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(1)

        rospy.loginfo("go right")
        msg_moving = MovingParam()
        msg_moving.moving_type=3
        msg_moving.moving_value_angular=60
        msg_moving.moving_value_linear=0.0
        self.pub_moving.publish(msg_moving)
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(1)

        rospy.loginfo("go straight")
        msg_moving = MovingParam()
        msg_moving.moving_type=4
        msg_moving.moving_value_angular=0
        msg_moving.moving_value_linear=0.24
        self.pub_moving.publish(msg_moving)
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False
    
        rospy.sleep(1)
        
        rospy.loginfo("go left")
        msg_moving = MovingParam()
        msg_moving.moving_type=2
        msg_moving.moving_value_angular=90
        msg_moving.moving_value_linear=0.0
        self.pub_moving.publish(msg_moving)
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(1)
        
        # self.pub_flow_task.publish(TASK_PARTS.TURNS)

    def turn_right(self):
        msg_moving = MovingParam()
        msg_moving.moving_type=4
        msg_moving.moving_value_angular=0
        msg_moving.moving_value_linear= 0.24
        self.pub_moving.publish(msg_moving)
        
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(5)
        
        rospy.loginfo("go right")
        msg_moving = MovingParam()
        msg_moving.moving_type=3
        msg_moving.moving_value_angular=90
        msg_moving.moving_value_linear=0.0
        self.pub_moving.publish(msg_moving)
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False
        rospy.sleep(5)
        
        rospy.loginfo("go straight")
        msg_moving = MovingParam()
        msg_moving.moving_type=4
        msg_moving.moving_value_angular=0
        msg_moving.moving_value_linear= 0.2
        self.pub_moving.publish(msg_moving)
        
        while True:
            if self.is_moving_complete == True:
                break
        self.is_moving_complete = False

        rospy.sleep(5)
        self.pub_flow_task.publish(TASK_PARTS.PARKING)
        
    def turn_left(self):
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False
            # go to sign
            rospy.loginfo("go straight")
            msg_moving = MovingParam()
            msg_moving.moving_type=4
            msg_moving.moving_value_angular=0
            msg_moving.moving_value_linear=0.1
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(5)
            
            # go to left of the sign 
            rospy.loginfo("go left")
            msg_moving = MovingParam()
            msg_moving.moving_type=2
            msg_moving.moving_value_angular=85
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(5)
            
            # from the sign go straight
            rospy.loginfo("go straight")
            msg_moving = MovingParam()
            msg_moving.moving_type=4
            msg_moving.moving_value_angular=0
            msg_moving.moving_value_linear=0.15
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(5)
            rospy.loginfo("moving finished")
            self.pub_flow_task.publish(TASK_PARTS.PARKING)

    def cbIntersectionOrder(self, order):
        
        msg_pub_intersection_return = UInt8()
        if int(order.data) == SIGNS.RIGHT:
            if self.is_avoid_obstacle:
                self.avoid_obstacle_turn()
            else:
                self.turn_right()
                
        elif order.data == SIGNS.LEFT:
            self.turn_left()
            
        msg_pub_intersection_return.data = self.StepOfIntersection.exit.value
        self.pub_intersection_return.publish(msg_pub_intersection_return)
        rospy.sleep(3)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_intersection')
    node = DetectIntersection()
    node.main()
