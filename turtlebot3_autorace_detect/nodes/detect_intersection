#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
import os 
from enum import Enum
from std_msgs.msg import UInt8,Int32
from turtlebot3_autorace_msgs.msg import MovingParam

class DetectIntersection():
    def __init__(self):
        
        self.is_moving_complete = False
        self.is_intersection_detected = False
        self.is_left_detected = False
        self.is_right_detected = False
        
        # subscribes state
        self.sub_traffic_sign = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)
        self.sub_intersection_order = rospy.Subscriber('/detect/intersection_order', UInt8, self.cbIntersectionOrder, queue_size=1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.pub_flow_mode = rospy.Publisher('/core/flow_mode', Int32, queue_size=1)
        # publisher state
        self.pub_intersection_return = rospy.Publisher('/detect/intersection_stamped', UInt8, queue_size=1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
    
        self.StepOfIntersection = Enum('StepOfIntersection', 'right left exit')
        self.TrafficSign = Enum('TrafficSign', 'idle lane_following parking cycle traffic_light intersection left right')   

        self.is_first = True


    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):
            
        if self.is_intersection_detected == True:
            if traffic_sign_type_msg.data == self.TrafficSign.left.value:
                self.is_left_detected = True
                self.is_right_detected = False

            elif traffic_sign_type_msg.data == self.TrafficSign.right.value:  
                self.is_right_detected = True
                self.is_left_detected = False
            self.is_intersection_detected == False

    def cbMovingComplete(self, data):
        self.is_moving_complete = True
   
    def cbIntersectionOrder(self, order):
        msg_pub_intersection_return = UInt8()
        print("FUCKING ORDER DATA :  {}".format(type(order.data)), order.data,self.StepOfIntersection.right.value )
        if int(order.data) == self.TrafficSign.right.value:
            print("STARTED RIGHT CYCLEE")
            if self.is_first:
                self.is_first = False
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                
                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=0
                msg_moving.moving_value_linear= 0.1
                self.pub_moving.publish(msg_moving)
                
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go right")
                msg_moving = MovingParam()
                msg_moving.moving_type=3
                msg_moving.moving_value_angular=60
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=0
                msg_moving.moving_value_linear=0.24
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
            
                rospy.sleep(1)
                
                rospy.loginfo("go left")
                msg_moving = MovingParam()
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)
                
                self.pub_flow_mode.publish(6)
                self.is_first = False
            else:
                rospy.loginfo("LAST TIME RIGHT TURN ")
                rospy.loginfo("go straight TURN")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=0
                msg_moving.moving_value_linear= 0.24
                self.pub_moving.publish(msg_moving)
                
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(5)
                
                rospy.loginfo("go right")
                msg_moving = MovingParam()
                msg_moving.moving_type=3
                msg_moving.moving_value_angular=90
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(5)
                
                rospy.loginfo("go straight")
                msg_moving = MovingParam()
                msg_moving.moving_type=4
                msg_moving.moving_value_angular=0
                msg_moving.moving_value_linear= 0.2
                self.pub_moving.publish(msg_moving)
                
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(5)
                
                self.pub_flow_mode.publish(-1)
        elif order.data == self.TrafficSign.left.value:
            print("STARTED LEFY CYCLE CYCLEE")
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False
            # go to sign
            rospy.loginfo("go straight")
            msg_moving = MovingParam()
            msg_moving.moving_type=4
            msg_moving.moving_value_angular=0
            msg_moving.moving_value_linear=0.1
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(5)
            
            # go to left of the sign 
            rospy.loginfo("go left")
            msg_moving = MovingParam()
            msg_moving.moving_type=2
            msg_moving.moving_value_angular=85
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(5)
            
            # from the sign go straight
            rospy.loginfo("go straight")
            msg_moving = MovingParam()
            msg_moving.moving_type=4
            msg_moving.moving_value_angular=0
            msg_moving.moving_value_linear=0.15
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(5)
            rospy.loginfo("moving finished")
            self.pub_flow_mode.publish(-1)
        msg_pub_intersection_return.data = self.StepOfIntersection.exit.value
        self.pub_intersection_return.publish(msg_pub_intersection_return)
        rospy.sleep(3)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_intersection')
    node = DetectIntersection()
    node.main()
