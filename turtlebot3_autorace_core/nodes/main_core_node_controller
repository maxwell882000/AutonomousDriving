#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, [AuTURBO] Kihoon Kim (https://github.com/auturbo), Gilbert, Ashe Kim

import rospy, roslaunch
import subprocess
import os
import sys
from enum import Enum
from std_msgs.msg import Bool
 
class CoreNodeController():
    def __init__(self):
        rospy.loginfo("Started Nessary COREE")
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes', '')
        
        self.Launcher = Enum('Launcher', 'launch_camera_ex_calib launch_detect_sign launch_detect_cycling launch_detect_intersection launch_detect_lane launch_control_lane launch_detect_parking launch_control_moving')
        self.uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
        rospy.loginfo("MAIN UUID {}".format(self.uuid))
        self.launch_camera_launched = False
        self.launch_detect_lane_launched = False    
        self.launch_detect_sign_launched = False
        self.launch_detect_parking_launched = False
        self.launch_control_lane_launched = False
        self.launch_control_moving_launched = False
        self.launch_detect_cycling_launched = False
        self.launch_detect_intersection_launched = False

        
        self.sub_returned_mode = rospy.Subscriber('/core/main_cycle', Bool, self.cycleNodes, queue_size=1)


        self.initialNodes()

    def cycleNodes(self, is_cycle):
        rospy.loginfo("Started cycle Nodes {}".format(is_cycle))
        # rospy.sleep(3)
        # if not is_cycle:
            
        #     self.fnLaunch(self.Launcher.launch_detect_cycling.value,  False)
            
            
    def initialNodes(self):
        
        # external cammera
        self.fnLaunch(self.Launcher.launch_camera_ex_calib.value, True)
        
        # detect lane
        self.fnLaunch(self.Launcher.launch_detect_lane.value, True)
        
        # detect sign
        # move in lane 
        self.fnLaunch(self.Launcher.launch_control_lane.value, True)

        self.fnLaunch(self.Launcher.launch_control_moving.value, True)
        # 
        self.fnLaunch(self.Launcher.launch_detect_cycling.value,  True)
        # 
        self.fnLaunch(self.Launcher.launch_detect_intersection.value, True)
        
        self.fnLaunch(self.Launcher.launch_detect_sign.value, True)
        
        
    def fnLaunch(self, launch_num, is_start):
        if launch_num == self.Launcher.launch_camera_ex_calib.value:
            if is_start == True:
                if self.launch_camera_launched == False:
                    self.launch_camera = roslaunch.scriptapi.ROSLaunch()
                    self.launch_camera = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_camera/launch/extrinsic_camera_calibration.launch"])
                    self.launch_camera_launched = True
                    self.launch_camera.start()
                else:
                    pass
            else:
                if self.launch_camera_launched == True:
                    self.launch_camera_launched = False
                    self.launch_camera.shutdown()
                else:
                    pass
        elif launch_num == self.Launcher.launch_detect_sign.value:
            if is_start == True:
                if self.launch_detect_sign_launched == False:
                    rospy.loginfo("STARTED DETCTED SIGN")
                    self.launch_detect_sign = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_sign = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_sign.launch"])
                    self.launch_detect_sign_launched = True
                    self.launch_detect_sign.start()
                else:
                    pass
            else:
                if self.launch_detect_sign_launched == True:
                    self.launch_detect_sign_launched = False
                    self.launch_detect_sign.shutdown()
                else:
                    pass                
                
        elif launch_num == self.Launcher.launch_detect_lane.value:
            rospy.loginfo("STARTED DETCTED SIGN {}".format(self.launch_detect_lane_launched))
            if is_start == True:
                # if self.launch_detect_lane_launched == False:
                    rospy.loginfo("STARTED DETCTED SIGN")
                    self.launch_detect_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_lane.launch"])
                    self.launch_detect_lane_launched = True
                    self.launch_detect_lane.start()
                # else:
                #     pass
            else:
                if self.launch_detect_lane_launched == True:
                    self.launch_detect_lane_launched = False
                    self.launch_detect_lane.shutdown()
                else:
                    pass      
                
        elif launch_num == self.Launcher.launch_detect_cycling.value:
            if is_start == True:
                if self.launch_detect_cycling_launched == False:
                    self.launch_detect_cycling = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_cycling = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_cycling.launch"])
                    self.launch_detect_cycling_launched = True
                    self.launch_detect_cycling.start()
                else:
                    pass
            else:
                if self.launch_detect_cycling_launched == True:
                    self.launch_detect_cycling_launched = False
                    self.launch_detect_cycling.shutdown()
                else:
                    pass    
                     
        elif launch_num == self.Launcher.launch_detect_intersection.value:
            if is_start == True:
                if self.launch_detect_intersection_launched == False:
                    self.launch_detect_intersection = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_intersection = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_intersection.launch"])
                    self.launch_detect_intersection_launched = True
                    self.launch_detect_intersection.start()
                else:
                    pass
            else:
                if self.launch_detect_intersection_launched == True:
                    self.launch_detect_intersection_launched = False
                    self.launch_detect_intersection.shutdown()
                else:
                    pass     
                         
        elif launch_num == self.Launcher.launch_control_lane.value:
            if is_start == True:
                if self.launch_control_lane_launched == False:
                    self.launch_control_lane = roslaunch.scriptapi.ROSLaunch()
                    self.launch_control_lane = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_lane.launch"])
                    self.launch_control_lane_launched = True
                    self.launch_control_lane.start()
                else:
                    pass
            else:
                if self.launch_control_lane_launched == True:
                    self.launch_control_lane_launched = False
                    self.launch_control_lane.shutdown()
                else:
                    pass                  
        elif launch_num == self.Launcher.launch_detect_parking.value:
            if is_start == True:
                if self.launch_detect_parking_launched == False:
                    self.launch_detect_parking = roslaunch.scriptapi.ROSLaunch()
                    self.launch_detect_parking = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_detect/launch/detect_parking.launch"])
                    self.launch_detect_parking_launched = True
                    self.launch_detect_parking.start()
                else:
                    pass
            else:
                if self.launch_detect_parking_launched == True:
                    self.launch_detect_parking_launched = False
                    self.launch_detect_parking.shutdown()
                else:
                    pass                  
       
        elif launch_num == self.Launcher.launch_control_moving.value:
            if is_start == True:
                if self.launch_control_moving_launched == False:
                    self.launch_control_moving = roslaunch.scriptapi.ROSLaunch()
                    self.launch_control_moving = roslaunch.parent.ROSLaunchParent(self.uuid, [self.ros_package_path + "turtlebot3_autorace_driving/launch/turtlebot3_autorace_control_moving.launch"])
                    self.launch_control_moving_launched = True
                    self.launch_control_moving.start()
                else:
                    pass
            else:
                if self.launch_control_moving_launched == True:
                    self.launch_control_moving_launched = False
                    self.launch_control_moving.shutdown()
                pass

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('main_core_node_controller')
    node = CoreNodeController()
    node.main()
