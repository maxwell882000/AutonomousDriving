#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim

import rospy
from enum import Enum
from std_msgs.msg import UInt8, Int32

class CoreModeDecider():
    def __init__(self):
        # subscribes : invoking object detected
        self.sub_traffic_sign  = rospy.Subscriber('/detect/traffic_sign', UInt8, self.cbInvokedByTrafficSign, queue_size=1)
        self.sub_returned_mode = rospy.Subscriber('/core/returned_mode', UInt8, self.cbReturnedMode, queue_size=1)

        # publishes : decided mode
        self.pub_decided_mode = rospy.Publisher('/core/decided_mode', UInt8, queue_size=1)
        
        self.pub_flow_mode = rospy.Publisher('/core/flow_mode', Int32, queue_size=1)
        
        self.InvokedObject = Enum('InvokedObject', 'traffic_sign')
        self.TrafficSign = Enum('TrafficSign', 'idle lane_following parking cycle traffic_light intersection left right')
        self.CurrentMode = Enum('CurrentMode', 'idle lane_following parking cycle traffic_light intersection left right')
        self.sub_flow_mode = rospy.Subscriber('/core/flow_mode', Int32, self.setMode, queue_size=1)
        self.is_mode = 2
        self.was_there = {}
        self.fnInitMode()
        self.turn_count = 0
    # Invoke if traffic sign is detected
    def cbInvokedByTrafficSign(self, traffic_sign_type_msg):
        self.fnDecideMode(self.InvokedObject.traffic_sign.value, traffic_sign_type_msg)
        
    def setMode(self, data):
        print("IS MODE INCREASED {}".format(data.data))
        self.is_mode = data.data
        
    def cbReturnedMode(self, mode):
        self.fnInitMode()

    def fnInitMode(self):                                                   # starts only when the program is started initially or any mission is completed
        self.current_mode = self.CurrentMode.lane_following.value
        self.fnPublishMode()

    def fnDecideMode(self, invoked_object, msg_data):                       # starts only when the traffic sign / traffic light is detected & current_mode is lane_following
        if self.current_mode == self.CurrentMode.lane_following.value:
            if invoked_object == self.InvokedObject.traffic_sign.value:     # Any Sign detected
         
                    
                if (self.is_mode == 2) and msg_data.data == self.TrafficSign.cycle.value:         # Parking Sign detected
                    rospy.loginfo("currentmode : cycle detected")
                    self.current_mode = self.CurrentMode.cycle.value
                    
                # if   msg_data.data == self.TrafficSign.traffic_light.value:         # Parking Sign detected
                #     self.current_mode = self.CurrentMode.traffic_light.value
                
                if self.turn_count >= 2 or  (self.is_mode == -1 and msg_data.data == self.TrafficSign.parking.value):
                    rospy.loginfo("currentmode : parking detected")
                    self.current_mode = self.CurrentMode.parking.value
                    
                if self.is_mode == 7 and msg_data.data == self.TrafficSign.left.value:         # Parking Sign detected
                    rospy.loginfo("currentmode : left detected")
                    self.current_mode = self.CurrentMode.left.value
                    self.turn_count += 1
                if (self.is_mode == 4 or self.is_mode ==7 )and msg_data.data == self.TrafficSign.right.value:         # Parking Sign detected
                    rospy.loginfo("currentmode : right detected")
                    self.current_mode = self.CurrentMode.right.value
                    self.turn_count +=1 
            else:
                pass
            
            self.fnPublishMode()
        else:
            pass

    def fnPublishMode(self):
        decided_mode = UInt8()
        decided_mode.data = self.current_mode
        self.pub_decided_mode.publish(decided_mode)
        
        self.pub_flow_mode.publish(self.is_mode)
    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_mode_decider')
    node = CoreModeDecider()
    node.main()
