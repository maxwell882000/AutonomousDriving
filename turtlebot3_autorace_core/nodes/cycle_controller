#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, [AuTURBO] Kihoon Kim (https://github.com/auturbo), Gilbert, Ashe Kim

import rospy, roslaunch
import subprocess
import os
import sys
from enum import Enum
from std_msgs.msg import UInt8, Bool
from constants import SIGNS

class CoreNodeController():
    def __init__(self):
        self.sub_cycling_stamped = rospy.Subscriber('/detect/cycling_stamped', UInt8, self.cbCyclingStamped, queue_size=1)
        self.sub_mode_control = rospy.Subscriber('/core/decided_mode', UInt8, self.cbReceiveMode, queue_size=1)
        self.sub_stopped = rospy.Subscriber('/control/stopped', Bool, self.isStopped, queue_size= 1)
        
        self.pub_cycling_order = rospy.Publisher('/detect/cycling_order', Bool, queue_size=1)   
        self.pub_mode_return = rospy.Publisher('/core/returned_mode', UInt8, queue_size=1)
        
        self.moving_mode = rospy.Publisher("/control/is_moving", Bool, queue_size= 1)
        self.stopped_mode = rospy.Publisher("/control/stopped_obstacle", Bool, queue_size= 1)      
        
        self.current_mode = SIGNS.IDLE


        self.sign_detected = False
        self.is_stopped = False
       
        loop_rate = rospy.Rate(10) # 10hz
        while True:   
            if self.sign_detected == True and self.is_stopped == True:
                self.pub_cycling_order.publish(True)
                self.sign_detected = False
            loop_rate.sleep()
            
    
    def isStopped(self, is_stopped):
        self.is_stopped = bool(is_stopped.data)
    
    def cbReceiveMode(self, mode_msg):
        if mode_msg.data == SIGNS.CYCLE:
            self.sign_detected = True

        
    def cbCyclingStamped(self, cycling_msg):
        
        self.current_mode = SIGNS.LANE_FOLLOWING
        msg_mode_return = UInt8()
        msg_mode_return.data = self.current_mode
        self.pub_mode_return.publish(msg_mode_return)
        self.is_stopped = False
        self.stopped_mode.publish(False)
        self.moving_mode.publish(True)
            
    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('cycle_controller')
    node = CoreNodeController()
    node.main()
