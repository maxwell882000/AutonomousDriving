#!/usr/bin/env python3
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Authors: Leon Jung, [AuTURBO] Kihoon Kim (https://github.com/auturbo), Gilbert, Ashe Kim

import rospy, roslaunch
import subprocess
import os
import sys
from enum import Enum
from std_msgs.msg import UInt8, Float64,Bool
 
class CoreNodeController():
    def __init__(self):
        self.ros_package_path = os.path.dirname(os.path.realpath(__file__))
        self.ros_package_path = self.ros_package_path.replace('turtlebot3_autorace_core/nodes', '')

        # subscribes : status returned
        self.sub_mode_control = rospy.Subscriber('/core/decided_mode', UInt8, self.cbReceiveMode, queue_size=1)
        self.sub_intersection_stamped = rospy.Subscriber('/detect/intersection_stamped', UInt8, self.cbIntersectionStamped, queue_size=1)

        # publishes orders
        self.pub_intersection_order = rospy.Publisher('/detect/intersection_order', UInt8, queue_size=1)
        self.pub_mode_return = rospy.Publisher('/core/returned_mode', UInt8, queue_size=1)
        
        self.CurrentMode = Enum('CurrentMode', 'idle lane_following parking cycle traffic_light intersection left right stop')
        self.current_mode = self.CurrentMode.idle.value
        
        self.StepOfIntersection = Enum('StepOfIntersection', 'right left exit')
        
        self.moving_mode = rospy.Publisher("/control/is_moving", Bool, queue_size= 1)
        self.stopped_mode = rospy.Publisher("/control/stopped_obstacle", Bool, queue_size= 1)        
   
        self.is_triggered = True
        self.is_stopped = False
        self.sub_stopped = rospy.Subscriber('/control/stopped_obstacle', Bool, self.isStopped, queue_size= 1)
        
        loop_rate = rospy.Rate(10) # 10hz
        while not rospy.is_shutdown():
            if self.is_triggered == True:
                self.fnControlNode()
            
            loop_rate.sleep()

    def isStopped(self, is_stopped):
        print("IS STOPPED {} {}".format(is_stopped.data, self.current_mode == self.CurrentMode.left.value or 
            self.current_mode == self.CurrentMode.right.value))
        self.is_stopped = bool(is_stopped.data)
        self.is_triggered = True
        
    def cbReceiveMode(self, mode_msg):
        rospy.loginfo("starts the progress with %d", mode_msg.data)
        if self.current_mode != self.CurrentMode.left \
            or self.current_mode != self.CurrentMode.right:
            self.current_mode = mode_msg.data

    def cbIntersectionStamped(self, intersection_msg):
        print("IS IT HERE")
        self.current_mode = self.CurrentMode.lane_following.value
        msg_mode_return = UInt8()
        msg_mode_return.data = self.current_mode
        self.pub_mode_return.publish(msg_mode_return)
        self.is_stopped = False
        self.moving_mode.publish(True)
        self.stopped_mode.publish(False)
        self.is_triggered = True

    def fnControlNode(self): 
        # lane_following
        
        if (self.current_mode == self.CurrentMode.left.value or 
            self.current_mode == self.CurrentMode.right.value ) \
            and self.is_stopped and self.is_triggered:
            rospy.loginfo("New trigger for intersection {}".format(self.current_mode))
            msg_pub_intersection_order = UInt8()
            msg_pub_intersection_order.data = self.current_mode
            self.is_triggered = False
            self.pub_intersection_order.publish(msg_pub_intersection_order)

   
    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('core_node_controller')
    node = CoreNodeController()
    node.main()
